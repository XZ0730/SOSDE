// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: attendservice.proto

package attendservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Attendservice_PullAttendance_FullMethodName        = "/attendservice.Attendservice/PullAttendance"
	Attendservice_NormalAttend_FullMethodName          = "/attendservice.Attendservice/NormalAttend"
	Attendservice_AttMember_FullMethodName             = "/attendservice.Attendservice/AttMember"
	Attendservice_LocationAttend_FullMethodName        = "/attendservice.Attendservice/LocationAttend"
	Attendservice_GetAttendListByCourse_FullMethodName = "/attendservice.Attendservice/GetAttendListByCourse"
)

// AttendserviceClient is the client API for Attendservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendserviceClient interface {
	PullAttendance(ctx context.Context, in *PullAttRequest, opts ...grpc.CallOption) (*AttResponse, error)
	NormalAttend(ctx context.Context, in *NormalReqest, opts ...grpc.CallOption) (*AttNorResponse, error)
	// 传入stuid courseid university
	AttMember(ctx context.Context, in *NormalReqest, opts ...grpc.CallOption) (*AttResponse, error)
	LocationAttend(ctx context.Context, in *LocationAttRequest, opts ...grpc.CallOption) (*AttResponse, error)
	GetAttendListByCourse(ctx context.Context, in *GetAttListByCourseReq, opts ...grpc.CallOption) (*AttNorResponse, error)
}

type attendserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendserviceClient(cc grpc.ClientConnInterface) AttendserviceClient {
	return &attendserviceClient{cc}
}

func (c *attendserviceClient) PullAttendance(ctx context.Context, in *PullAttRequest, opts ...grpc.CallOption) (*AttResponse, error) {
	out := new(AttResponse)
	err := c.cc.Invoke(ctx, Attendservice_PullAttendance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendserviceClient) NormalAttend(ctx context.Context, in *NormalReqest, opts ...grpc.CallOption) (*AttNorResponse, error) {
	out := new(AttNorResponse)
	err := c.cc.Invoke(ctx, Attendservice_NormalAttend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendserviceClient) AttMember(ctx context.Context, in *NormalReqest, opts ...grpc.CallOption) (*AttResponse, error) {
	out := new(AttResponse)
	err := c.cc.Invoke(ctx, Attendservice_AttMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendserviceClient) LocationAttend(ctx context.Context, in *LocationAttRequest, opts ...grpc.CallOption) (*AttResponse, error) {
	out := new(AttResponse)
	err := c.cc.Invoke(ctx, Attendservice_LocationAttend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendserviceClient) GetAttendListByCourse(ctx context.Context, in *GetAttListByCourseReq, opts ...grpc.CallOption) (*AttNorResponse, error) {
	out := new(AttNorResponse)
	err := c.cc.Invoke(ctx, Attendservice_GetAttendListByCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendserviceServer is the server API for Attendservice service.
// All implementations must embed UnimplementedAttendserviceServer
// for forward compatibility
type AttendserviceServer interface {
	PullAttendance(context.Context, *PullAttRequest) (*AttResponse, error)
	NormalAttend(context.Context, *NormalReqest) (*AttNorResponse, error)
	// 传入stuid courseid university
	AttMember(context.Context, *NormalReqest) (*AttResponse, error)
	LocationAttend(context.Context, *LocationAttRequest) (*AttResponse, error)
	GetAttendListByCourse(context.Context, *GetAttListByCourseReq) (*AttNorResponse, error)
	mustEmbedUnimplementedAttendserviceServer()
}

// UnimplementedAttendserviceServer must be embedded to have forward compatible implementations.
type UnimplementedAttendserviceServer struct {
}

func (UnimplementedAttendserviceServer) PullAttendance(context.Context, *PullAttRequest) (*AttResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullAttendance not implemented")
}
func (UnimplementedAttendserviceServer) NormalAttend(context.Context, *NormalReqest) (*AttNorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NormalAttend not implemented")
}
func (UnimplementedAttendserviceServer) AttMember(context.Context, *NormalReqest) (*AttResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttMember not implemented")
}
func (UnimplementedAttendserviceServer) LocationAttend(context.Context, *LocationAttRequest) (*AttResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationAttend not implemented")
}
func (UnimplementedAttendserviceServer) GetAttendListByCourse(context.Context, *GetAttListByCourseReq) (*AttNorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttendListByCourse not implemented")
}
func (UnimplementedAttendserviceServer) mustEmbedUnimplementedAttendserviceServer() {}

// UnsafeAttendserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendserviceServer will
// result in compilation errors.
type UnsafeAttendserviceServer interface {
	mustEmbedUnimplementedAttendserviceServer()
}

func RegisterAttendserviceServer(s grpc.ServiceRegistrar, srv AttendserviceServer) {
	s.RegisterService(&Attendservice_ServiceDesc, srv)
}

func _Attendservice_PullAttendance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAttRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendserviceServer).PullAttendance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attendservice_PullAttendance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendserviceServer).PullAttendance(ctx, req.(*PullAttRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attendservice_NormalAttend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendserviceServer).NormalAttend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attendservice_NormalAttend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendserviceServer).NormalAttend(ctx, req.(*NormalReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attendservice_AttMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NormalReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendserviceServer).AttMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attendservice_AttMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendserviceServer).AttMember(ctx, req.(*NormalReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attendservice_LocationAttend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationAttRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendserviceServer).LocationAttend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attendservice_LocationAttend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendserviceServer).LocationAttend(ctx, req.(*LocationAttRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attendservice_GetAttendListByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttListByCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendserviceServer).GetAttendListByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attendservice_GetAttendListByCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendserviceServer).GetAttendListByCourse(ctx, req.(*GetAttListByCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Attendservice_ServiceDesc is the grpc.ServiceDesc for Attendservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attendservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attendservice.Attendservice",
	HandlerType: (*AttendserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PullAttendance",
			Handler:    _Attendservice_PullAttendance_Handler,
		},
		{
			MethodName: "NormalAttend",
			Handler:    _Attendservice_NormalAttend_Handler,
		},
		{
			MethodName: "AttMember",
			Handler:    _Attendservice_AttMember_Handler,
		},
		{
			MethodName: "LocationAttend",
			Handler:    _Attendservice_LocationAttend_Handler,
		},
		{
			MethodName: "GetAttendListByCourse",
			Handler:    _Attendservice_GetAttendListByCourse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attendservice.proto",
}
