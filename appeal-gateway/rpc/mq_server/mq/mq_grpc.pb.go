// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.5
// source: mq.proto

package mq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mq_Publish_FullMethodName      = "/mq.Mq/Publish"
	Mq_PublishLeave_FullMethodName = "/mq.Mq/PublishLeave"
)

// MqClient is the client API for Mq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MqClient interface {
	Publish(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	PublishLeave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*Response, error)
}

type mqClient struct {
	cc grpc.ClientConnInterface
}

func NewMqClient(cc grpc.ClientConnInterface) MqClient {
	return &mqClient{cc}
}

func (c *mqClient) Publish(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Mq_Publish_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mqClient) PublishLeave(ctx context.Context, in *LeaveRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Mq_PublishLeave_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MqServer is the server API for Mq service.
// All implementations must embed UnimplementedMqServer
// for forward compatibility
type MqServer interface {
	Publish(context.Context, *Request) (*Response, error)
	PublishLeave(context.Context, *LeaveRequest) (*Response, error)
	mustEmbedUnimplementedMqServer()
}

// UnimplementedMqServer must be embedded to have forward compatible implementations.
type UnimplementedMqServer struct {
}

func (UnimplementedMqServer) Publish(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedMqServer) PublishLeave(context.Context, *LeaveRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLeave not implemented")
}
func (UnimplementedMqServer) mustEmbedUnimplementedMqServer() {}

// UnsafeMqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MqServer will
// result in compilation errors.
type UnsafeMqServer interface {
	mustEmbedUnimplementedMqServer()
}

func RegisterMqServer(s grpc.ServiceRegistrar, srv MqServer) {
	s.RegisterService(&Mq_ServiceDesc, srv)
}

func _Mq_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mq_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServer).Publish(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mq_PublishLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MqServer).PublishLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mq_PublishLeave_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MqServer).PublishLeave(ctx, req.(*LeaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mq_ServiceDesc is the grpc.ServiceDesc for Mq service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mq_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mq.Mq",
	HandlerType: (*MqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Mq_Publish_Handler,
		},
		{
			MethodName: "PublishLeave",
			Handler:    _Mq_PublishLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mq.proto",
}
