// Code generated by goctl. DO NOT EDIT.
// Source: appealService.proto

package appealclient

import (
	"context"

	"appeal/appeal"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AppealListReply     = appeal.AppealListReply
	AppealListRequset   = appeal.AppealListRequset
	AppealModel         = appeal.AppealModel
	AppealRequest       = appeal.AppealRequest
	AppealResponse      = appeal.AppealResponse
	ComplainGetRequest  = appeal.ComplainGetRequest
	ComplainModel       = appeal.ComplainModel
	ComplainPassRequest = appeal.ComplainPassRequest
	ComplainRequest     = appeal.ComplainRequest
	ComplainResponse    = appeal.ComplainResponse

	Appeal interface {
		StudentAskforLeave(ctx context.Context, in *AppealRequest, opts ...grpc.CallOption) (*AppealResponse, error)
		GetAppealListBySid(ctx context.Context, in *AppealListRequset, opts ...grpc.CallOption) (*AppealListReply, error)
		ComplainToSupervisor(ctx context.Context, in *ComplainRequest, opts ...grpc.CallOption) (*ComplainResponse, error)
		GetComplainTables(ctx context.Context, in *ComplainGetRequest, opts ...grpc.CallOption) (*ComplainResponse, error)
		PassComplainTables(ctx context.Context, in *ComplainPassRequest, opts ...grpc.CallOption) (*AppealResponse, error)
	}

	defaultAppeal struct {
		cli zrpc.Client
	}
)

func NewAppeal(cli zrpc.Client) Appeal {
	return &defaultAppeal{
		cli: cli,
	}
}

func (m *defaultAppeal) StudentAskforLeave(ctx context.Context, in *AppealRequest, opts ...grpc.CallOption) (*AppealResponse, error) {
	client := appeal.NewAppealClient(m.cli.Conn())
	return client.StudentAskforLeave(ctx, in, opts...)
}

func (m *defaultAppeal) GetAppealListBySid(ctx context.Context, in *AppealListRequset, opts ...grpc.CallOption) (*AppealListReply, error) {
	client := appeal.NewAppealClient(m.cli.Conn())
	return client.GetAppealListBySid(ctx, in, opts...)
}

func (m *defaultAppeal) ComplainToSupervisor(ctx context.Context, in *ComplainRequest, opts ...grpc.CallOption) (*ComplainResponse, error) {
	client := appeal.NewAppealClient(m.cli.Conn())
	return client.ComplainToSupervisor(ctx, in, opts...)
}

func (m *defaultAppeal) GetComplainTables(ctx context.Context, in *ComplainGetRequest, opts ...grpc.CallOption) (*ComplainResponse, error) {
	client := appeal.NewAppealClient(m.cli.Conn())
	return client.GetComplainTables(ctx, in, opts...)
}

func (m *defaultAppeal) PassComplainTables(ctx context.Context, in *ComplainPassRequest, opts ...grpc.CallOption) (*AppealResponse, error) {
	client := appeal.NewAppealClient(m.cli.Conn())
	return client.PassComplainTables(ctx, in, opts...)
}
