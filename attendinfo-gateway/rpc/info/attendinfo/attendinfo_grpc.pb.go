// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.2.0
// source: attendinfo.proto

package attendinfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Attendinfo_GetCourseAttInfo_FullMethodName     = "/attendinfo.Attendinfo/GetCourseAttInfo"
	Attendinfo_GetCounsellorAttInfo_FullMethodName = "/attendinfo.Attendinfo/GetCounsellorAttInfo"
)

// AttendinfoClient is the client API for Attendinfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttendinfoClient interface {
	GetCourseAttInfo(ctx context.Context, in *CourseInfoRequest, opts ...grpc.CallOption) (*CourseInfoResponse, error)
	GetCounsellorAttInfo(ctx context.Context, in *CounsellorAttInfoReq, opts ...grpc.CallOption) (*CounsellorAttInfoRsp, error)
}

type attendinfoClient struct {
	cc grpc.ClientConnInterface
}

func NewAttendinfoClient(cc grpc.ClientConnInterface) AttendinfoClient {
	return &attendinfoClient{cc}
}

func (c *attendinfoClient) GetCourseAttInfo(ctx context.Context, in *CourseInfoRequest, opts ...grpc.CallOption) (*CourseInfoResponse, error) {
	out := new(CourseInfoResponse)
	err := c.cc.Invoke(ctx, Attendinfo_GetCourseAttInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attendinfoClient) GetCounsellorAttInfo(ctx context.Context, in *CounsellorAttInfoReq, opts ...grpc.CallOption) (*CounsellorAttInfoRsp, error) {
	out := new(CounsellorAttInfoRsp)
	err := c.cc.Invoke(ctx, Attendinfo_GetCounsellorAttInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttendinfoServer is the server API for Attendinfo service.
// All implementations must embed UnimplementedAttendinfoServer
// for forward compatibility
type AttendinfoServer interface {
	GetCourseAttInfo(context.Context, *CourseInfoRequest) (*CourseInfoResponse, error)
	GetCounsellorAttInfo(context.Context, *CounsellorAttInfoReq) (*CounsellorAttInfoRsp, error)
	mustEmbedUnimplementedAttendinfoServer()
}

// UnimplementedAttendinfoServer must be embedded to have forward compatible implementations.
type UnimplementedAttendinfoServer struct {
}

func (UnimplementedAttendinfoServer) GetCourseAttInfo(context.Context, *CourseInfoRequest) (*CourseInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseAttInfo not implemented")
}
func (UnimplementedAttendinfoServer) GetCounsellorAttInfo(context.Context, *CounsellorAttInfoReq) (*CounsellorAttInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCounsellorAttInfo not implemented")
}
func (UnimplementedAttendinfoServer) mustEmbedUnimplementedAttendinfoServer() {}

// UnsafeAttendinfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttendinfoServer will
// result in compilation errors.
type UnsafeAttendinfoServer interface {
	mustEmbedUnimplementedAttendinfoServer()
}

func RegisterAttendinfoServer(s grpc.ServiceRegistrar, srv AttendinfoServer) {
	s.RegisterService(&Attendinfo_ServiceDesc, srv)
}

func _Attendinfo_GetCourseAttInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CourseInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendinfoServer).GetCourseAttInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attendinfo_GetCourseAttInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendinfoServer).GetCourseAttInfo(ctx, req.(*CourseInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attendinfo_GetCounsellorAttInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CounsellorAttInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttendinfoServer).GetCounsellorAttInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Attendinfo_GetCounsellorAttInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttendinfoServer).GetCounsellorAttInfo(ctx, req.(*CounsellorAttInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Attendinfo_ServiceDesc is the grpc.ServiceDesc for Attendinfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attendinfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attendinfo.Attendinfo",
	HandlerType: (*AttendinfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCourseAttInfo",
			Handler:    _Attendinfo_GetCourseAttInfo_Handler,
		},
		{
			MethodName: "GetCounsellorAttInfo",
			Handler:    _Attendinfo_GetCounsellorAttInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "attendinfo.proto",
}
